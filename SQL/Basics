-- BASICS(https://sqlbolt.com/)

   -Limiting results to a subset
    Another clause which is commonly used with the ORDER BY clause are the LIMIT and OFFSET clauses, which are a useful optimization to indicate to the database the subset
    of the results you care about.
    The LIMIT will reduce the number of rows to return, and the optional OFFSET will specify where to begin counting the number rows from.

   -JOINS
    -----The INNER JOIN is a process that matches rows from the first table and the second table which have the same key (as defined by the ON constraint) to create a 
    result row with the combined columns from both tables. After the tables are joined, the other clauses we learned previously are then applied.
    INNER JOIN AND JOIN IS THE SAME THING

    If the two tables have asymmetric data, which can easily happen when data is entered in different stages, then we would have to use a LEFT JOIN, RIGHT JOIN or FULL JOIN
    instead to ensure that the data you need is not left out of the results.
    LEFT JOIN simply includes rows from A regardless of whether a matching row is found in B. The RIGHT JOIN is the same, but reversed, keeping rows in B regardless of 
    whether a match is found in A. Finally, a FULL JOIN simply means that rows from both tables are kept, regardless of whether a matching row exists in the other table.
    When using any of these new joins, you will likely have to write additional logic to deal with NULLs in the result and constraints

 -EXPRESSIONS
  The use of expressions can save time and extra post-processing of the result data, but can also make the query harder to read, so its recommended that when expressions
  are used in the SELECT part of the query, that they are also given a descriptive alias using the AS keyword.

-AGGREGATES
  SQL also supports the use of aggregate expressions (or functions) that allows to summarize information about a group of rows of data.
  Without a specified grouping, each aggregate function is going to run on the whole set of result rows and return a single value.
  And like normal expressions, giving your aggregate functions an alias ensures that the results will be easier to read and process.

   Function       Description
   COUNT(*),      A common function used to counts the number of rows in the group if no column name is specified. 
   COUNT(column)  Otherwise, count the number of rows in the group with non-NULL values in the specified column.
   MIN(column)	  Finds the smallest numerical value in the specified column for all rows in the group.
   MAX(column)	  Finds the largest numerical value in the specified column for all rows in the group.
   AVG(column)	  Finds the average numerical value in the specified column for all rows in the group.
   SUM(column)	  Finds the sum of all numerical values in the specified column for the rows in the group.

The GROUP BY clause works by grouping rows that have the same value in the column specified.
GROUP BY clause is executed after the WHERE clause (which filters the rows which are to be grouped), then how exactly do we filter the grouped rows? - By uisng HAVING

-- Order of execution of a Query
   SELECT DISTINCT column, AGG_FUNC(column_or_expression), â€¦
   FROM mytable
    JOIN another_table
      ON mytable.column = another_table.column
    WHERE constraint_expression
    GROUP BY column
    HAVING constraint_expression
    ORDER BY column ASC/DESC
    LIMIT count OFFSET COUNT;

Query order of execution
1. FROM and JOINs
The FROM clause, and subsequent JOINs are first executed to determine the total working set of data that is being queried. This includes subqueries in this clause, and can
cause temporary tables to be created under the hood containing all the columns and rows of the tables being joined.

2. WHERE
Once we have the total working set of data, the first-pass WHERE constraints are applied to the individual rows, and rows that do not satisfy the constraint are discarded. 
Each of the constraints can only access columns directly from the tables requested in the FROM clause. Aliases in the SELECT part of the query are not accessible in most
databases since they may include expressions dependent on parts of the query that have not yet executed.

3. GROUP BY
The remaining rows after the WHERE constraints are applied are then grouped based on common values in the column specified in the GROUP BY clause. As a result of the grouping,
there will only be as many rows as there are unique values in that column. Implicitly, this means that you should only need to use this when you have aggregate functions in your query.

4. HAVING
If the query has a GROUP BY clause, then the constraints in the HAVING clause are then applied to the grouped rows, discard the grouped rows that don't satisfy the constraint.
Like the WHERE clause, aliases are also not accessible from this step in most databases.

5. SELECT
Any expressions in the SELECT part of the query are finally computed.

6. DISTINCT
Of the remaining rows, rows with duplicate values in the column marked as DISTINCT will be discarded.

7. ORDER BY
If an order is specified by the ORDER BY clause, the rows are then sorted by the specified data in either ascending or descending order. Since all the expressions in the SELECT
part of the query have been computed, you can reference aliases in this clause.

8. LIMIT / OFFSET
Finally, the rows that fall outside the range specified by the LIMIT and OFFSET are discarded, leaving the final set of rows to be returned from the query.

Conclusion
Not every query needs to have all the parts we listed above, but a part of why SQL is so flexible is that it allows developers and data analysts to quickly manipulate data without
having to write additional code, all just by using the above clauses.



---Table data types
Different databases support different data types, but the common types support numeric, string, and other miscellaneous things like dates, booleans, or even binary data. 
Here are some examples that you might use in real code.

Data type	Description
INTEGER, BOOLEAN	The integer datatypes can store whole integer values like the count of a number or an age. In some implementations, the boolean value is just represented 
as an integer value of just 0 or 1.
FLOAT, DOUBLE, REAL	The floating point datatypes can store more precise numerical data like measurements or fractional values. Different types can be used depending on the 
floating point precision required for that value.
CHARACTER(num_chars), VARCHAR(num_chars), TEXT- The text based datatypes can store strings and text in all sorts of locales. The distinction between the various types
generally amount to underlaying efficiency of the database when working with these columns.

Both the CHARACTER and VARCHAR (variable character) types are specified with the max number of characters that they can store (longer values may be truncated), 
so can be more efficient to store and query with big tables.

DATE, DATETIME	SQL can also store date and time stamps to keep track of time series and event data. They can be tricky to work with especially when manipulating data across timezones.
BLOB- Finally, SQL can store binary data in blobs right in the database. These values are often opaque to the database, so you usually have to store them with the right metadata to requery them.
